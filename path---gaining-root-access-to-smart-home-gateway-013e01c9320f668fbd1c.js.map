{"version":3,"sources":["webpack:///path---gaining-root-access-to-smart-home-gateway-013e01c9320f668fbd1c.js","webpack:///./.cache/json/gaining-root-access-to-smart-home-gateway.json"],"names":["webpackJsonp","633","module","exports","data","markdownRemark","html","htmlAst","type","children","tagName","properties","value","href","className","quirksMode","timeToRead","excerpt","frontmatter","title","cover","hash","date","category","tags","fields","nextTitle","nextSlug","prevTitle","prevSlug","slug","pathContext"],"mappings":"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","file":"path---gaining-root-access-to-smart-home-gateway-013e01c9320f668fbd1c.js","sourcesContent":["webpackJsonp([233424391880023],{\n\n/***/ 633:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Recently I bought a Risco Smart Home Gateway, and as I expected it is a rebranded off-the-shelf micro computer.\\nWhen delivered, the HDMI and optical S/PDIF outputs and IR input hinted that it was not just a dedicated smart home\\ngateway. The OS seems to be loaded from a micro SD card, comparable to e.g. a Raspberry Pi. Also, the z-wave\\ncontroller is just a USB dongle and not built-in.</p>\\n<p>After configuring, its network interface shows up on my router as SolidRun. A quick search finds the SolidRun CuBox-i, most\\nprobably the <a href=\\\"https://developer.solid-run.com/products/cubox-i/\\\">CuBox i2eX or CuBox i4p</a>, because it also has an eSata port.</p>\\n<p>These range from $100 - $150. Not too bad, considering the Risco Smart Home Gateway is around €300. Of course, this\\nincludes a z-wave adapter (around €50) and their special software. Their software is actually much less flexible\\nthan e.g. <a href=\\\"https://www.domoticz.com/\\\">Domoticz</a>, but I am sure it makes up for that in security and robustness.</p>\\n<p>Solid Run has a <a href=\\\"https://developer.solid-run.com\\\">community site</a> for developers with plenty of information.</p>\\n<p>The CuBox is an ARM micro computer with an FreeScale i.MX6 SoC and that means it can run several flavors of Linux,\\n<a href=\\\"https://kodi.wiki/view/SolidRun_CuBox-i\\\">Kodi</a> and in theory and old version of <a href=\\\"http://forum.solid-run.com/android-os-on-cubox-i-and-hummingboard-f6/\\\">Android</a>.\\nAn in-depth review can be found <a href=\\\"https://www.androidauthority.com/cubox-review-587011/\\\">here</a>.</p>\\n<p>I won't judge the performance or review it further, but it might be worth mentioning that by know it is at least\\nsuperseded by the Raspberry Pi 4, because it can play h265 video.</p>\\n<p>Now if you are bored with your Risco Smart Home you could just install a different image on the micro SD card and\\nuse it as a media player or something, but let's see if we can gain more control over it as is. </p>\\n<p>You could use Wireshark to intercept messages between the Risco Smart Home device and the alarm system, but first\\nI want to try to SSH in and/or inspect the software it is running.</p>\\n<p>In this post, I will display the IP as 192.168.0.xxx. Accessing that IP in the browser shows nothing running on port\\n80, but the IP is pingable.</p>\\n<p><code class=\\\"language-text\\\">nmap -v -sT 192.168.0.xxx</code> on the IP shows:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">PORT     STATE SERVICE\\n22/tcp   open  ssh\\n8080/tcp open  http-proxy\\n8443/tcp open  https-alt</code></pre>\\n      </div>\\n<p>Opening <a href=\\\"http://192.168.0.xxx:8080\\\">http://192.168.0.xxx:8080</a> in the browser it redirects to <a href=\\\"http://192.168.0.xxx:8443/static/index.html\\\">http://192.168.0.xxx:8443/static/index.html</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">HTTP ERROR 404\\n\\nProblem accessing /static/index.html. Reason:\\n\\n    Not Found\\n\\nPowered by Jetty://</code></pre>\\n      </div>\\n<p>Opening <a href=\\\"https://192.168.0.xxx:8443\\\">https://192.168.0.xxx:8443</a> in the browser gives the same as 8080, but with SSL. It uses a self-signed\\ncertificate by <a href=\\\"https://www.openhab.org/\\\">openHAB</a>. This is open-source home automation software and this may be useful\\nif we gain access to the device!</p>\\n<p>It is possible to create an SSH connection, but it requests a password. Trying some default root passwords failed. Now\\nwe know the certificate is from openHAB, maybe the CuBox is running openHAB? The default\\ncredentials <code class=\\\"language-text\\\">openhabian/openhabian</code> do not work.</p>\\n<p>It may be possible to inspect the micro SD to get more information. When disconnecting the gateway from power/utp\\nthe alarm does not go off (good!), and the micro SD can be inspected on a different machine:</p>\\n<p>The micro sd has several partitions: boot, postgre, rootfs, and scratch.</p>\\n<p><em>rootfs:</em> there is a <code class=\\\"language-text\\\">/home</code> dir, but it is empty.\\nthere is a <code class=\\\"language-text\\\">/linuxrc</code> dir that seems to point at <code class=\\\"language-text\\\">bin/busybox</code>. This seems to be a <a href=\\\"https://www.busybox.net/\\\">BusyBox</a> installation.</p>\\n<p><em>scratch:</em> contains some ssh certificates. Copied to local disk.</p>\\n<p>After reconnecting the gateway to power and UTP the message \\\"Communication with the Gateway failed.\\\" is shown in Risco cloud.\\nAfter a couple of minutes it works fine. However, the button controller that was paired (that did not work) is not\\nshowing up anymore. The Fibaro plug does show up and still works as expected.</p>\\n<p>It is not possible to login with default BusyBox credentials, so after disconnecting again, taking a closer look at the\\nvolume <em>scratch</em>: it contains a file <code class=\\\"language-text\\\">@ssh/sshd_config</code> with a line <code class=\\\"language-text\\\">PermitRootLogin yes</code>.</p>\\n<p>So assuming this is the SSH config that is used runtime, we need to somehow find the root password, and then we can SSH with <code class=\\\"language-text\\\">ssh root@192.168.0.xxx</code></p>\\n<p>Following this <a href=\\\"https://superuser.com/questions/1135128/what-is-default-username-and-passoword-for-busyboxs-ftpd\\\">suggestion</a>:</p>\\n<blockquote>\\n<p>see the /etc/shadow or /etc/passwd (if the /etc/shadow not exist) with texteditor</p>\\n</blockquote>\\n<p>I found that, indeed, <code class=\\\"language-text\\\">/etc/shadow</code> contains (values are fake):</p>\\n<p><code class=\\\"language-text\\\">root:$1$foo$bar:10933:0:99999:7:::</code></p>\\n<p>So there is in fact a root entry with a hashed password visible.\\nOne option would be to update the hash string with a hash string of a password that we already know, a method I used\\nyears ago when adding users for a deprecated application by directly inserting lines into a database table. However,\\nI have no idea what effect this would have on an OS, so I would prefer to refrain from modifying the filesystem at this\\npoint. Additionally, assuming that the provided SD card image always uses the same root password, it would be valuable\\nto know the password to be able to log into other devices.</p>\\n<p>Another option would be to try to retrieve the password from the root entry in <code class=\\\"language-text\\\">/etc/shadow</code>. More information about\\nwhy passwords are stored in <code class=\\\"language-text\\\">/etc/shadow</code> instead of <code class=\\\"language-text\\\">/etc/passwd</code> <a href=\\\"https://www.slashroot.in/how-are-passwords-stored-linux-understanding-hashing-shadow-utils\\\">here</a>.</p>\\n<p>From this article I also learned how to read the shadow file: the password entry ($1$foo$bar) is in fact three\\nproperties separated by $. The $1 indicates MD5 hashing was used, which is notoriously easy to crack. The second\\npart (\\\"foo\\\") is the salt and the third part (\\\"bar\\\") is the hash from the password + salt.</p>\\n<p>This article also shows that using the hash calculated from the salt and the password with openssl.\\nThis is great, because know we can write a small script to try out many passwords without trying to login to SSH and\\nbeing kicked out for too many failed responses. The command looks like this, with <code class=\\\"language-text\\\">-1</code> indicating md5, <code class=\\\"language-text\\\">foo</code> as the\\nsalt and <code class=\\\"language-text\\\">secret</code> the actual password.</p>\\n<p><code class=\\\"language-text\\\">openssl passwd -1 -salt foo secret # output: $1$foo$ygQElgzdVoe51UiGBN5TV/</code></p>\\n<p>It is easy to do this in a bash script, but of course there already exists some open source tool: <a href=\\\"https://www.openwall.com/john/\\\">John the Ripper</a>\\n(<a href=\\\"https://linuxconfig.org/password-cracking-with-john-the-ripper-on-linux\\\">info on usage</a>)</p>\\n<ul>\\n<li>First run <code class=\\\"language-text\\\">sudo unshadow rootfs/etc/passwd rootfs/etc/shadow &gt; mypasswd.txt</code>\\nwhere <code class=\\\"language-text\\\">unshadow</code> is a util from <code class=\\\"language-text\\\">john</code>.</li>\\n<li>Now remove all the entries from mypasswd.txt except the root user.</li>\\n<li>Now run <code class=\\\"language-text\\\">john mypasswd.txt --fork=4</code>. </li>\\n</ul>\\n<p>The <code class=\\\"language-text\\\">fork</code> flag enables multi threading, in this case on 4 threads. While the command is running, I see that 4 out of 8 cores\\nhave a 100% load. After approximately 7 hours a password is found. Please note, that the other threads keep running, but a nice overview\\nis giving of how long the processes have been running and at what passwords they are trying.</p>\\n<p>Logging in to SSH as root works! (So it was indeed the correct <code class=\\\"language-text\\\">sshd_config</code>).\\nA prompt is shown with only \\\"#\\\". Running <code class=\\\"language-text\\\">df -h</code> gives:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Filesystem                Size      Used Available Use% Mounted on\\n/dev/root                 2.8M      2.3M    444.0K  84% /mnt/initrd\\ndevtmpfs                239.2M         0    239.2M   0% /dev\\n/dev/disk/by-label/rootfs\\n                          1.0G    284.2M    544.7M  34% /\\ntmpfs                   249.4M      4.0K    249.4M   0% /dev/shm\\ntmpfs                   249.4M      9.1M    240.2M   4% /tmp\\ntmpfs                   249.4M    120.0K    249.2M   0% /run\\n/dev/mmcblk0p1           63.0M      5.9M     57.1M   9% /boot\\n/dev/mmcblk0p3            1.0G     93.7M    828.9M  10% /var/lib/pgsql\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/spool\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/log\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssl/private\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssh\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/nextgen\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /home</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">cat /var/log/messages</code> works and gives a lot of information, e.g. a daemon is running on user \\\"nextgen\\\" called Risco Service Manager.</p>\\n<p>It was a fun exercise to try to get into a device you own, but don't have remote access too. Next steps could be to try\\nto install extra services on the device that could interact with the Risco Service Manager, or to intercept messages to\\nor from the Risco Service Manager.</p>\\n<p><em>Published with permission from Risco</em></p>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Recently I bought a Risco Smart Home Gateway, and as I expected it is a rebranded off-the-shelf micro computer.\\nWhen delivered, the HDMI and optical S/PDIF outputs and IR input hinted that it was not just a dedicated smart home\\ngateway. The OS seems to be loaded from a micro SD card, comparable to e.g. a Raspberry Pi. Also, the z-wave\\ncontroller is just a USB dongle and not built-in.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"After configuring, its network interface shows up on my router as SolidRun. A quick search finds the SolidRun CuBox-i, most\\nprobably the \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://developer.solid-run.com/products/cubox-i/\"},\"children\":[{\"type\":\"text\",\"value\":\"CuBox i2eX or CuBox i4p\"}]},{\"type\":\"text\",\"value\":\", because it also has an eSata port.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"These range from $100 - $150. Not too bad, considering the Risco Smart Home Gateway is around €300. Of course, this\\nincludes a z-wave adapter (around €50) and their special software. Their software is actually much less flexible\\nthan e.g. \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.domoticz.com/\"},\"children\":[{\"type\":\"text\",\"value\":\"Domoticz\"}]},{\"type\":\"text\",\"value\":\", but I am sure it makes up for that in security and robustness.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Solid Run has a \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://developer.solid-run.com\"},\"children\":[{\"type\":\"text\",\"value\":\"community site\"}]},{\"type\":\"text\",\"value\":\" for developers with plenty of information.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The CuBox is an ARM micro computer with an FreeScale i.MX6 SoC and that means it can run several flavors of Linux,\\n\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://kodi.wiki/view/SolidRun_CuBox-i\"},\"children\":[{\"type\":\"text\",\"value\":\"Kodi\"}]},{\"type\":\"text\",\"value\":\" and in theory and old version of \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"http://forum.solid-run.com/android-os-on-cubox-i-and-hummingboard-f6/\"},\"children\":[{\"type\":\"text\",\"value\":\"Android\"}]},{\"type\":\"text\",\"value\":\".\\nAn in-depth review can be found \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.androidauthority.com/cubox-review-587011/\"},\"children\":[{\"type\":\"text\",\"value\":\"here\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"I won't judge the performance or review it further, but it might be worth mentioning that by know it is at least\\nsuperseded by the Raspberry Pi 4, because it can play h265 video.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Now if you are bored with your Risco Smart Home you could just install a different image on the micro SD card and\\nuse it as a media player or something, but let's see if we can gain more control over it as is. \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"You could use Wireshark to intercept messages between the Risco Smart Home device and the alarm system, but first\\nI want to try to SSH in and/or inspect the software it is running.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"In this post, I will display the IP as 192.168.0.xxx. Accessing that IP in the browser shows nothing running on port\\n80, but the IP is pingable.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"nmap -v -sT 192.168.0.xxx\"}]},{\"type\":\"text\",\"value\":\" on the IP shows:\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"]},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"PORT     STATE SERVICE\\n22/tcp   open  ssh\\n8080/tcp open  http-proxy\\n8443/tcp open  https-alt\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Opening \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"http://192.168.0.xxx:8080\"},\"children\":[{\"type\":\"text\",\"value\":\"http://192.168.0.xxx:8080\"}]},{\"type\":\"text\",\"value\":\" in the browser it redirects to \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"http://192.168.0.xxx:8443/static/index.html\"},\"children\":[{\"type\":\"text\",\"value\":\"http://192.168.0.xxx:8443/static/index.html\"}]},{\"type\":\"text\",\"value\":\":\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"]},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"HTTP ERROR 404\\n\\nProblem accessing /static/index.html. Reason:\\n\\n    Not Found\\n\\nPowered by Jetty://\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Opening \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://192.168.0.xxx:8443\"},\"children\":[{\"type\":\"text\",\"value\":\"https://192.168.0.xxx:8443\"}]},{\"type\":\"text\",\"value\":\" in the browser gives the same as 8080, but with SSL. It uses a self-signed\\ncertificate by \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.openhab.org/\"},\"children\":[{\"type\":\"text\",\"value\":\"openHAB\"}]},{\"type\":\"text\",\"value\":\". This is open-source home automation software and this may be useful\\nif we gain access to the device!\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It is possible to create an SSH connection, but it requests a password. Trying some default root passwords failed. Now\\nwe know the certificate is from openHAB, maybe the CuBox is running openHAB? The default\\ncredentials \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"openhabian/openhabian\"}]},{\"type\":\"text\",\"value\":\" do not work.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It may be possible to inspect the micro SD to get more information. When disconnecting the gateway from power/utp\\nthe alarm does not go off (good!), and the micro SD can be inspected on a different machine:\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The micro sd has several partitions: boot, postgre, rootfs, and scratch.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"rootfs:\"}]},{\"type\":\"text\",\"value\":\" there is a \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/home\"}]},{\"type\":\"text\",\"value\":\" dir, but it is empty.\\nthere is a \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/linuxrc\"}]},{\"type\":\"text\",\"value\":\" dir that seems to point at \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"bin/busybox\"}]},{\"type\":\"text\",\"value\":\". This seems to be a \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.busybox.net/\"},\"children\":[{\"type\":\"text\",\"value\":\"BusyBox\"}]},{\"type\":\"text\",\"value\":\" installation.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"scratch:\"}]},{\"type\":\"text\",\"value\":\" contains some ssh certificates. Copied to local disk.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"After reconnecting the gateway to power and UTP the message \\\"Communication with the Gateway failed.\\\" is shown in Risco cloud.\\nAfter a couple of minutes it works fine. However, the button controller that was paired (that did not work) is not\\nshowing up anymore. The Fibaro plug does show up and still works as expected.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It is not possible to login with default BusyBox credentials, so after disconnecting again, taking a closer look at the\\nvolume \"},{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"scratch\"}]},{\"type\":\"text\",\"value\":\": it contains a file \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"@ssh/sshd_config\"}]},{\"type\":\"text\",\"value\":\" with a line \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"PermitRootLogin yes\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"So assuming this is the SSH config that is used runtime, we need to somehow find the root password, and then we can SSH with \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"ssh root@192.168.0.xxx\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Following this \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://superuser.com/questions/1135128/what-is-default-username-and-passoword-for-busyboxs-ftpd\"},\"children\":[{\"type\":\"text\",\"value\":\"suggestion\"}]},{\"type\":\"text\",\"value\":\":\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"blockquote\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"see the /etc/shadow or /etc/passwd (if the /etc/shadow not exist) with texteditor\"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"I found that, indeed, \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/shadow\"}]},{\"type\":\"text\",\"value\":\" contains (values are fake):\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"root:$1$foo$bar:10933:0:99999:7:::\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"So there is in fact a root entry with a hashed password visible.\\nOne option would be to update the hash string with a hash string of a password that we already know, a method I used\\nyears ago when adding users for a deprecated application by directly inserting lines into a database table. However,\\nI have no idea what effect this would have on an OS, so I would prefer to refrain from modifying the filesystem at this\\npoint. Additionally, assuming that the provided SD card image always uses the same root password, it would be valuable\\nto know the password to be able to log into other devices.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Another option would be to try to retrieve the password from the root entry in \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/shadow\"}]},{\"type\":\"text\",\"value\":\". More information about\\nwhy passwords are stored in \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/shadow\"}]},{\"type\":\"text\",\"value\":\" instead of \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/passwd\"}]},{\"type\":\"text\",\"value\":\" \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.slashroot.in/how-are-passwords-stored-linux-understanding-hashing-shadow-utils\"},\"children\":[{\"type\":\"text\",\"value\":\"here\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"From this article I also learned how to read the shadow file: the password entry ($1$foo$bar) is in fact three\\nproperties separated by $. The $1 indicates MD5 hashing was used, which is notoriously easy to crack. The second\\npart (\\\"foo\\\") is the salt and the third part (\\\"bar\\\") is the hash from the password + salt.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"This article also shows that using the hash calculated from the salt and the password with openssl.\\nThis is great, because know we can write a small script to try out many passwords without trying to login to SSH and\\nbeing kicked out for too many failed responses. The command looks like this, with \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"-1\"}]},{\"type\":\"text\",\"value\":\" indicating md5, \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"foo\"}]},{\"type\":\"text\",\"value\":\" as the\\nsalt and \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"secret\"}]},{\"type\":\"text\",\"value\":\" the actual password.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"openssl passwd -1 -salt foo secret # output: $1$foo$ygQElgzdVoe51UiGBN5TV/\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It is easy to do this in a bash script, but of course there already exists some open source tool: \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.openwall.com/john/\"},\"children\":[{\"type\":\"text\",\"value\":\"John the Ripper\"}]},{\"type\":\"text\",\"value\":\"\\n(\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://linuxconfig.org/password-cracking-with-john-the-ripper-on-linux\"},\"children\":[{\"type\":\"text\",\"value\":\"info on usage\"}]},{\"type\":\"text\",\"value\":\")\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"ul\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"First run \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"sudo unshadow rootfs/etc/passwd rootfs/etc/shadow > mypasswd.txt\"}]},{\"type\":\"text\",\"value\":\"\\nwhere \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"unshadow\"}]},{\"type\":\"text\",\"value\":\" is a util from \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"john\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Now remove all the entries from mypasswd.txt except the root user.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Now run \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"john mypasswd.txt --fork=4\"}]},{\"type\":\"text\",\"value\":\". \"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"fork\"}]},{\"type\":\"text\",\"value\":\" flag enables multi threading, in this case on 4 threads. While the command is running, I see that 4 out of 8 cores\\nhave a 100% load. After approximately 7 hours a password is found. Please note, that the other threads keep running, but a nice overview\\nis giving of how long the processes have been running and at what passwords they are trying.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Logging in to SSH as root works! (So it was indeed the correct \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"sshd_config\"}]},{\"type\":\"text\",\"value\":\").\\nA prompt is shown with only \\\"#\\\". Running \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"df -h\"}]},{\"type\":\"text\",\"value\":\" gives:\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"]},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"Filesystem                Size      Used Available Use% Mounted on\\n/dev/root                 2.8M      2.3M    444.0K  84% /mnt/initrd\\ndevtmpfs                239.2M         0    239.2M   0% /dev\\n/dev/disk/by-label/rootfs\\n                          1.0G    284.2M    544.7M  34% /\\ntmpfs                   249.4M      4.0K    249.4M   0% /dev/shm\\ntmpfs                   249.4M      9.1M    240.2M   4% /tmp\\ntmpfs                   249.4M    120.0K    249.2M   0% /run\\n/dev/mmcblk0p1           63.0M      5.9M     57.1M   9% /boot\\n/dev/mmcblk0p3            1.0G     93.7M    828.9M  10% /var/lib/pgsql\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/spool\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/log\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssl/private\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssh\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/nextgen\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /home\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"cat /var/log/messages\"}]},{\"type\":\"text\",\"value\":\" works and gives a lot of information, e.g. a daemon is running on user \\\"nextgen\\\" called Risco Service Manager.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It was a fun exercise to try to get into a device you own, but don't have remote access too. Next steps could be to try\\nto install extra services on the device that could interact with the Risco Service Manager, or to intercept messages to\\nor from the Risco Service Manager.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Published with permission from Risco\"}]}]}],\"data\":{\"quirksMode\":false}},\"timeToRead\":7,\"excerpt\":\"Recently I bought a Risco Smart Home Gateway, and as I expected it is a rebranded off-the-shelf micro computer. \\nWhen delivered, the HDMI…\",\"frontmatter\":{\"title\":\"Gaining Root Access to Smart Home Gateway\",\"cover\":\"/cover/\",\"hash\":\"4d97cdca7231ff8269a49510a8f1f795e85d0765\",\"date\":\"05-09-2019\",\"category\":\"mypc\",\"tags\":[\"mypc\"]},\"fields\":{\"nextTitle\":\"Discourse on Ubuntu 14.04\",\"nextSlug\":\"/discourse-on-ubuntu-14-04\",\"prevTitle\":\"Dop Beeping HDD\",\"prevSlug\":\"/dop-beeping-hdd\",\"slug\":\"/gaining-root-access-to-smart-home-gateway\"}}},\"pathContext\":{\"slug\":\"/gaining-root-access-to-smart-home-gateway\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---gaining-root-access-to-smart-home-gateway-013e01c9320f668fbd1c.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Recently I bought a Risco Smart Home Gateway, and as I expected it is a rebranded off-the-shelf micro computer.\\nWhen delivered, the HDMI and optical S/PDIF outputs and IR input hinted that it was not just a dedicated smart home\\ngateway. The OS seems to be loaded from a micro SD card, comparable to e.g. a Raspberry Pi. Also, the z-wave\\ncontroller is just a USB dongle and not built-in.</p>\\n<p>After configuring, its network interface shows up on my router as SolidRun. A quick search finds the SolidRun CuBox-i, most\\nprobably the <a href=\\\"https://developer.solid-run.com/products/cubox-i/\\\">CuBox i2eX or CuBox i4p</a>, because it also has an eSata port.</p>\\n<p>These range from $100 - $150. Not too bad, considering the Risco Smart Home Gateway is around €300. Of course, this\\nincludes a z-wave adapter (around €50) and their special software. Their software is actually much less flexible\\nthan e.g. <a href=\\\"https://www.domoticz.com/\\\">Domoticz</a>, but I am sure it makes up for that in security and robustness.</p>\\n<p>Solid Run has a <a href=\\\"https://developer.solid-run.com\\\">community site</a> for developers with plenty of information.</p>\\n<p>The CuBox is an ARM micro computer with an FreeScale i.MX6 SoC and that means it can run several flavors of Linux,\\n<a href=\\\"https://kodi.wiki/view/SolidRun_CuBox-i\\\">Kodi</a> and in theory and old version of <a href=\\\"http://forum.solid-run.com/android-os-on-cubox-i-and-hummingboard-f6/\\\">Android</a>.\\nAn in-depth review can be found <a href=\\\"https://www.androidauthority.com/cubox-review-587011/\\\">here</a>.</p>\\n<p>I won't judge the performance or review it further, but it might be worth mentioning that by know it is at least\\nsuperseded by the Raspberry Pi 4, because it can play h265 video.</p>\\n<p>Now if you are bored with your Risco Smart Home you could just install a different image on the micro SD card and\\nuse it as a media player or something, but let's see if we can gain more control over it as is. </p>\\n<p>You could use Wireshark to intercept messages between the Risco Smart Home device and the alarm system, but first\\nI want to try to SSH in and/or inspect the software it is running.</p>\\n<p>In this post, I will display the IP as 192.168.0.xxx. Accessing that IP in the browser shows nothing running on port\\n80, but the IP is pingable.</p>\\n<p><code class=\\\"language-text\\\">nmap -v -sT 192.168.0.xxx</code> on the IP shows:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">PORT     STATE SERVICE\\n22/tcp   open  ssh\\n8080/tcp open  http-proxy\\n8443/tcp open  https-alt</code></pre>\\n      </div>\\n<p>Opening <a href=\\\"http://192.168.0.xxx:8080\\\">http://192.168.0.xxx:8080</a> in the browser it redirects to <a href=\\\"http://192.168.0.xxx:8443/static/index.html\\\">http://192.168.0.xxx:8443/static/index.html</a>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">HTTP ERROR 404\\n\\nProblem accessing /static/index.html. Reason:\\n\\n    Not Found\\n\\nPowered by Jetty://</code></pre>\\n      </div>\\n<p>Opening <a href=\\\"https://192.168.0.xxx:8443\\\">https://192.168.0.xxx:8443</a> in the browser gives the same as 8080, but with SSL. It uses a self-signed\\ncertificate by <a href=\\\"https://www.openhab.org/\\\">openHAB</a>. This is open-source home automation software and this may be useful\\nif we gain access to the device!</p>\\n<p>It is possible to create an SSH connection, but it requests a password. Trying some default root passwords failed. Now\\nwe know the certificate is from openHAB, maybe the CuBox is running openHAB? The default\\ncredentials <code class=\\\"language-text\\\">openhabian/openhabian</code> do not work.</p>\\n<p>It may be possible to inspect the micro SD to get more information. When disconnecting the gateway from power/utp\\nthe alarm does not go off (good!), and the micro SD can be inspected on a different machine:</p>\\n<p>The micro sd has several partitions: boot, postgre, rootfs, and scratch.</p>\\n<p><em>rootfs:</em> there is a <code class=\\\"language-text\\\">/home</code> dir, but it is empty.\\nthere is a <code class=\\\"language-text\\\">/linuxrc</code> dir that seems to point at <code class=\\\"language-text\\\">bin/busybox</code>. This seems to be a <a href=\\\"https://www.busybox.net/\\\">BusyBox</a> installation.</p>\\n<p><em>scratch:</em> contains some ssh certificates. Copied to local disk.</p>\\n<p>After reconnecting the gateway to power and UTP the message \\\"Communication with the Gateway failed.\\\" is shown in Risco cloud.\\nAfter a couple of minutes it works fine. However, the button controller that was paired (that did not work) is not\\nshowing up anymore. The Fibaro plug does show up and still works as expected.</p>\\n<p>It is not possible to login with default BusyBox credentials, so after disconnecting again, taking a closer look at the\\nvolume <em>scratch</em>: it contains a file <code class=\\\"language-text\\\">@ssh/sshd_config</code> with a line <code class=\\\"language-text\\\">PermitRootLogin yes</code>.</p>\\n<p>So assuming this is the SSH config that is used runtime, we need to somehow find the root password, and then we can SSH with <code class=\\\"language-text\\\">ssh root@192.168.0.xxx</code></p>\\n<p>Following this <a href=\\\"https://superuser.com/questions/1135128/what-is-default-username-and-passoword-for-busyboxs-ftpd\\\">suggestion</a>:</p>\\n<blockquote>\\n<p>see the /etc/shadow or /etc/passwd (if the /etc/shadow not exist) with texteditor</p>\\n</blockquote>\\n<p>I found that, indeed, <code class=\\\"language-text\\\">/etc/shadow</code> contains (values are fake):</p>\\n<p><code class=\\\"language-text\\\">root:$1$foo$bar:10933:0:99999:7:::</code></p>\\n<p>So there is in fact a root entry with a hashed password visible.\\nOne option would be to update the hash string with a hash string of a password that we already know, a method I used\\nyears ago when adding users for a deprecated application by directly inserting lines into a database table. However,\\nI have no idea what effect this would have on an OS, so I would prefer to refrain from modifying the filesystem at this\\npoint. Additionally, assuming that the provided SD card image always uses the same root password, it would be valuable\\nto know the password to be able to log into other devices.</p>\\n<p>Another option would be to try to retrieve the password from the root entry in <code class=\\\"language-text\\\">/etc/shadow</code>. More information about\\nwhy passwords are stored in <code class=\\\"language-text\\\">/etc/shadow</code> instead of <code class=\\\"language-text\\\">/etc/passwd</code> <a href=\\\"https://www.slashroot.in/how-are-passwords-stored-linux-understanding-hashing-shadow-utils\\\">here</a>.</p>\\n<p>From this article I also learned how to read the shadow file: the password entry ($1$foo$bar) is in fact three\\nproperties separated by $. The $1 indicates MD5 hashing was used, which is notoriously easy to crack. The second\\npart (\\\"foo\\\") is the salt and the third part (\\\"bar\\\") is the hash from the password + salt.</p>\\n<p>This article also shows that using the hash calculated from the salt and the password with openssl.\\nThis is great, because know we can write a small script to try out many passwords without trying to login to SSH and\\nbeing kicked out for too many failed responses. The command looks like this, with <code class=\\\"language-text\\\">-1</code> indicating md5, <code class=\\\"language-text\\\">foo</code> as the\\nsalt and <code class=\\\"language-text\\\">secret</code> the actual password.</p>\\n<p><code class=\\\"language-text\\\">openssl passwd -1 -salt foo secret # output: $1$foo$ygQElgzdVoe51UiGBN5TV/</code></p>\\n<p>It is easy to do this in a bash script, but of course there already exists some open source tool: <a href=\\\"https://www.openwall.com/john/\\\">John the Ripper</a>\\n(<a href=\\\"https://linuxconfig.org/password-cracking-with-john-the-ripper-on-linux\\\">info on usage</a>)</p>\\n<ul>\\n<li>First run <code class=\\\"language-text\\\">sudo unshadow rootfs/etc/passwd rootfs/etc/shadow &gt; mypasswd.txt</code>\\nwhere <code class=\\\"language-text\\\">unshadow</code> is a util from <code class=\\\"language-text\\\">john</code>.</li>\\n<li>Now remove all the entries from mypasswd.txt except the root user.</li>\\n<li>Now run <code class=\\\"language-text\\\">john mypasswd.txt --fork=4</code>. </li>\\n</ul>\\n<p>The <code class=\\\"language-text\\\">fork</code> flag enables multi threading, in this case on 4 threads. While the command is running, I see that 4 out of 8 cores\\nhave a 100% load. After approximately 7 hours a password is found. Please note, that the other threads keep running, but a nice overview\\nis giving of how long the processes have been running and at what passwords they are trying.</p>\\n<p>Logging in to SSH as root works! (So it was indeed the correct <code class=\\\"language-text\\\">sshd_config</code>).\\nA prompt is shown with only \\\"#\\\". Running <code class=\\\"language-text\\\">df -h</code> gives:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Filesystem                Size      Used Available Use% Mounted on\\n/dev/root                 2.8M      2.3M    444.0K  84% /mnt/initrd\\ndevtmpfs                239.2M         0    239.2M   0% /dev\\n/dev/disk/by-label/rootfs\\n                          1.0G    284.2M    544.7M  34% /\\ntmpfs                   249.4M      4.0K    249.4M   0% /dev/shm\\ntmpfs                   249.4M      9.1M    240.2M   4% /tmp\\ntmpfs                   249.4M    120.0K    249.2M   0% /run\\n/dev/mmcblk0p1           63.0M      5.9M     57.1M   9% /boot\\n/dev/mmcblk0p3            1.0G     93.7M    828.9M  10% /var/lib/pgsql\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/spool\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/log\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssl/private\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssh\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/nextgen\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /home</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">cat /var/log/messages</code> works and gives a lot of information, e.g. a daemon is running on user \\\"nextgen\\\" called Risco Service Manager.</p>\\n<p>It was a fun exercise to try to get into a device you own, but don't have remote access too. Next steps could be to try\\nto install extra services on the device that could interact with the Risco Service Manager, or to intercept messages to\\nor from the Risco Service Manager.</p>\\n<p><em>Published with permission from Risco</em></p>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Recently I bought a Risco Smart Home Gateway, and as I expected it is a rebranded off-the-shelf micro computer.\\nWhen delivered, the HDMI and optical S/PDIF outputs and IR input hinted that it was not just a dedicated smart home\\ngateway. The OS seems to be loaded from a micro SD card, comparable to e.g. a Raspberry Pi. Also, the z-wave\\ncontroller is just a USB dongle and not built-in.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"After configuring, its network interface shows up on my router as SolidRun. A quick search finds the SolidRun CuBox-i, most\\nprobably the \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://developer.solid-run.com/products/cubox-i/\"},\"children\":[{\"type\":\"text\",\"value\":\"CuBox i2eX or CuBox i4p\"}]},{\"type\":\"text\",\"value\":\", because it also has an eSata port.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"These range from $100 - $150. Not too bad, considering the Risco Smart Home Gateway is around €300. Of course, this\\nincludes a z-wave adapter (around €50) and their special software. Their software is actually much less flexible\\nthan e.g. \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.domoticz.com/\"},\"children\":[{\"type\":\"text\",\"value\":\"Domoticz\"}]},{\"type\":\"text\",\"value\":\", but I am sure it makes up for that in security and robustness.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Solid Run has a \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://developer.solid-run.com\"},\"children\":[{\"type\":\"text\",\"value\":\"community site\"}]},{\"type\":\"text\",\"value\":\" for developers with plenty of information.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The CuBox is an ARM micro computer with an FreeScale i.MX6 SoC and that means it can run several flavors of Linux,\\n\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://kodi.wiki/view/SolidRun_CuBox-i\"},\"children\":[{\"type\":\"text\",\"value\":\"Kodi\"}]},{\"type\":\"text\",\"value\":\" and in theory and old version of \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"http://forum.solid-run.com/android-os-on-cubox-i-and-hummingboard-f6/\"},\"children\":[{\"type\":\"text\",\"value\":\"Android\"}]},{\"type\":\"text\",\"value\":\".\\nAn in-depth review can be found \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.androidauthority.com/cubox-review-587011/\"},\"children\":[{\"type\":\"text\",\"value\":\"here\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"I won't judge the performance or review it further, but it might be worth mentioning that by know it is at least\\nsuperseded by the Raspberry Pi 4, because it can play h265 video.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Now if you are bored with your Risco Smart Home you could just install a different image on the micro SD card and\\nuse it as a media player or something, but let's see if we can gain more control over it as is. \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"You could use Wireshark to intercept messages between the Risco Smart Home device and the alarm system, but first\\nI want to try to SSH in and/or inspect the software it is running.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"In this post, I will display the IP as 192.168.0.xxx. Accessing that IP in the browser shows nothing running on port\\n80, but the IP is pingable.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"nmap -v -sT 192.168.0.xxx\"}]},{\"type\":\"text\",\"value\":\" on the IP shows:\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"]},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"PORT     STATE SERVICE\\n22/tcp   open  ssh\\n8080/tcp open  http-proxy\\n8443/tcp open  https-alt\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Opening \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"http://192.168.0.xxx:8080\"},\"children\":[{\"type\":\"text\",\"value\":\"http://192.168.0.xxx:8080\"}]},{\"type\":\"text\",\"value\":\" in the browser it redirects to \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"http://192.168.0.xxx:8443/static/index.html\"},\"children\":[{\"type\":\"text\",\"value\":\"http://192.168.0.xxx:8443/static/index.html\"}]},{\"type\":\"text\",\"value\":\":\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"]},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"HTTP ERROR 404\\n\\nProblem accessing /static/index.html. Reason:\\n\\n    Not Found\\n\\nPowered by Jetty://\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Opening \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://192.168.0.xxx:8443\"},\"children\":[{\"type\":\"text\",\"value\":\"https://192.168.0.xxx:8443\"}]},{\"type\":\"text\",\"value\":\" in the browser gives the same as 8080, but with SSL. It uses a self-signed\\ncertificate by \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.openhab.org/\"},\"children\":[{\"type\":\"text\",\"value\":\"openHAB\"}]},{\"type\":\"text\",\"value\":\". This is open-source home automation software and this may be useful\\nif we gain access to the device!\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It is possible to create an SSH connection, but it requests a password. Trying some default root passwords failed. Now\\nwe know the certificate is from openHAB, maybe the CuBox is running openHAB? The default\\ncredentials \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"openhabian/openhabian\"}]},{\"type\":\"text\",\"value\":\" do not work.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It may be possible to inspect the micro SD to get more information. When disconnecting the gateway from power/utp\\nthe alarm does not go off (good!), and the micro SD can be inspected on a different machine:\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The micro sd has several partitions: boot, postgre, rootfs, and scratch.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"rootfs:\"}]},{\"type\":\"text\",\"value\":\" there is a \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/home\"}]},{\"type\":\"text\",\"value\":\" dir, but it is empty.\\nthere is a \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/linuxrc\"}]},{\"type\":\"text\",\"value\":\" dir that seems to point at \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"bin/busybox\"}]},{\"type\":\"text\",\"value\":\". This seems to be a \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.busybox.net/\"},\"children\":[{\"type\":\"text\",\"value\":\"BusyBox\"}]},{\"type\":\"text\",\"value\":\" installation.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"scratch:\"}]},{\"type\":\"text\",\"value\":\" contains some ssh certificates. Copied to local disk.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"After reconnecting the gateway to power and UTP the message \\\"Communication with the Gateway failed.\\\" is shown in Risco cloud.\\nAfter a couple of minutes it works fine. However, the button controller that was paired (that did not work) is not\\nshowing up anymore. The Fibaro plug does show up and still works as expected.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It is not possible to login with default BusyBox credentials, so after disconnecting again, taking a closer look at the\\nvolume \"},{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"scratch\"}]},{\"type\":\"text\",\"value\":\": it contains a file \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"@ssh/sshd_config\"}]},{\"type\":\"text\",\"value\":\" with a line \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"PermitRootLogin yes\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"So assuming this is the SSH config that is used runtime, we need to somehow find the root password, and then we can SSH with \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"ssh root@192.168.0.xxx\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Following this \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://superuser.com/questions/1135128/what-is-default-username-and-passoword-for-busyboxs-ftpd\"},\"children\":[{\"type\":\"text\",\"value\":\"suggestion\"}]},{\"type\":\"text\",\"value\":\":\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"blockquote\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"see the /etc/shadow or /etc/passwd (if the /etc/shadow not exist) with texteditor\"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"I found that, indeed, \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/shadow\"}]},{\"type\":\"text\",\"value\":\" contains (values are fake):\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"root:$1$foo$bar:10933:0:99999:7:::\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"So there is in fact a root entry with a hashed password visible.\\nOne option would be to update the hash string with a hash string of a password that we already know, a method I used\\nyears ago when adding users for a deprecated application by directly inserting lines into a database table. However,\\nI have no idea what effect this would have on an OS, so I would prefer to refrain from modifying the filesystem at this\\npoint. Additionally, assuming that the provided SD card image always uses the same root password, it would be valuable\\nto know the password to be able to log into other devices.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Another option would be to try to retrieve the password from the root entry in \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/shadow\"}]},{\"type\":\"text\",\"value\":\". More information about\\nwhy passwords are stored in \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/shadow\"}]},{\"type\":\"text\",\"value\":\" instead of \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"/etc/passwd\"}]},{\"type\":\"text\",\"value\":\" \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.slashroot.in/how-are-passwords-stored-linux-understanding-hashing-shadow-utils\"},\"children\":[{\"type\":\"text\",\"value\":\"here\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"From this article I also learned how to read the shadow file: the password entry ($1$foo$bar) is in fact three\\nproperties separated by $. The $1 indicates MD5 hashing was used, which is notoriously easy to crack. The second\\npart (\\\"foo\\\") is the salt and the third part (\\\"bar\\\") is the hash from the password + salt.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"This article also shows that using the hash calculated from the salt and the password with openssl.\\nThis is great, because know we can write a small script to try out many passwords without trying to login to SSH and\\nbeing kicked out for too many failed responses. The command looks like this, with \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"-1\"}]},{\"type\":\"text\",\"value\":\" indicating md5, \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"foo\"}]},{\"type\":\"text\",\"value\":\" as the\\nsalt and \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"secret\"}]},{\"type\":\"text\",\"value\":\" the actual password.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"openssl passwd -1 -salt foo secret # output: $1$foo$ygQElgzdVoe51UiGBN5TV/\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It is easy to do this in a bash script, but of course there already exists some open source tool: \"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.openwall.com/john/\"},\"children\":[{\"type\":\"text\",\"value\":\"John the Ripper\"}]},{\"type\":\"text\",\"value\":\"\\n(\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://linuxconfig.org/password-cracking-with-john-the-ripper-on-linux\"},\"children\":[{\"type\":\"text\",\"value\":\"info on usage\"}]},{\"type\":\"text\",\"value\":\")\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"ul\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"First run \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"sudo unshadow rootfs/etc/passwd rootfs/etc/shadow > mypasswd.txt\"}]},{\"type\":\"text\",\"value\":\"\\nwhere \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"unshadow\"}]},{\"type\":\"text\",\"value\":\" is a util from \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"john\"}]},{\"type\":\"text\",\"value\":\".\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Now remove all the entries from mypasswd.txt except the root user.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Now run \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"john mypasswd.txt --fork=4\"}]},{\"type\":\"text\",\"value\":\". \"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"The \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"fork\"}]},{\"type\":\"text\",\"value\":\" flag enables multi threading, in this case on 4 threads. While the command is running, I see that 4 out of 8 cores\\nhave a 100% load. After approximately 7 hours a password is found. Please note, that the other threads keep running, but a nice overview\\nis giving of how long the processes have been running and at what passwords they are trying.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Logging in to SSH as root works! (So it was indeed the correct \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"sshd_config\"}]},{\"type\":\"text\",\"value\":\").\\nA prompt is shown with only \\\"#\\\". Running \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"df -h\"}]},{\"type\":\"text\",\"value\":\" gives:\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"]},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"Filesystem                Size      Used Available Use% Mounted on\\n/dev/root                 2.8M      2.3M    444.0K  84% /mnt/initrd\\ndevtmpfs                239.2M         0    239.2M   0% /dev\\n/dev/disk/by-label/rootfs\\n                          1.0G    284.2M    544.7M  34% /\\ntmpfs                   249.4M      4.0K    249.4M   0% /dev/shm\\ntmpfs                   249.4M      9.1M    240.2M   4% /tmp\\ntmpfs                   249.4M    120.0K    249.2M   0% /run\\n/dev/mmcblk0p1           63.0M      5.9M     57.1M   9% /boot\\n/dev/mmcblk0p3            1.0G     93.7M    828.9M  10% /var/lib/pgsql\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/spool\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /var/log\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssl/private\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/ssh\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /etc/nextgen\\n/dev/mmcblk0p4            1.0G     23.7M    898.7M   3% /home\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"cat /var/log/messages\"}]},{\"type\":\"text\",\"value\":\" works and gives a lot of information, e.g. a daemon is running on user \\\"nextgen\\\" called Risco Service Manager.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"It was a fun exercise to try to get into a device you own, but don't have remote access too. Next steps could be to try\\nto install extra services on the device that could interact with the Risco Service Manager, or to intercept messages to\\nor from the Risco Service Manager.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"element\",\"tagName\":\"em\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Published with permission from Risco\"}]}]}],\"data\":{\"quirksMode\":false}},\"timeToRead\":7,\"excerpt\":\"Recently I bought a Risco Smart Home Gateway, and as I expected it is a rebranded off-the-shelf micro computer. \\nWhen delivered, the HDMI…\",\"frontmatter\":{\"title\":\"Gaining Root Access to Smart Home Gateway\",\"cover\":\"/cover/\",\"hash\":\"4d97cdca7231ff8269a49510a8f1f795e85d0765\",\"date\":\"05-09-2019\",\"category\":\"mypc\",\"tags\":[\"mypc\"]},\"fields\":{\"nextTitle\":\"Discourse on Ubuntu 14.04\",\"nextSlug\":\"/discourse-on-ubuntu-14-04\",\"prevTitle\":\"Dop Beeping HDD\",\"prevSlug\":\"/dop-beeping-hdd\",\"slug\":\"/gaining-root-access-to-smart-home-gateway\"}}},\"pathContext\":{\"slug\":\"/gaining-root-access-to-smart-home-gateway\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/gaining-root-access-to-smart-home-gateway.json\n// module id = 633\n// module chunks = 233424391880023"],"sourceRoot":""}